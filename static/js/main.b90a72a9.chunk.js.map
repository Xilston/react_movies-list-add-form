{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","checkValid","useState","Math","random","toFixed","slice","id","touched","setTouched","customValidation","isValid","errorMessage","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","props","onAdd","count","setCount","movieTitle","setMovieTitle","movieDescription","setMovieDescription","movieImgURL","setMovieImgURL","movieImdbURL","setMovieImdbURL","movieImdbId","setMovieImdbId","isValidURL","url","check","RegExp","test","canConfirm","onSubmit","currentCount","disabled","App","moviesFromServer","visibleMovies","setVisibleMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b90a72a9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { ValidURL } from '../../types/ValidURL';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  checkValid?: (url: string) => ValidURL,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  checkValid,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  let customValidation = {\n    isValid: true,\n    errorMessage: `${label} correct`,\n  };\n\n  if (checkValid && value) {\n    customValidation = checkValid(value);\n  }\n\n  const hasError = touched && required && !value && customValidation.isValid;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || !customValidation.isValid,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!customValidation.isValid && (\n        <p className=\"help is-danger\">{customValidation.errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { ValidURL } from '../../types/ValidURL';\n\ninterface Props {\n  onAdd: (newMovie: Movie) => void;\n}\n\nexport const NewMovie = (props: Props) => {\n  const { onAdd } = props;\n\n  const [count, setCount] = useState(0);\n\n  const [movieTitle, setMovieTitle] = useState('');\n  const [movieDescription, setMovieDescription] = useState('');\n  const [movieImgURL, setMovieImgURL] = useState('');\n  const [movieImdbURL, setMovieImdbURL] = useState('');\n  const [movieImdbId, setMovieImdbId] = useState('');\n\n  function isValidURL(url: string): ValidURL {\n  // eslint-disable-next-line max-len\n    const regex = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/);\n    const check = regex.test(url);\n    const result: ValidURL = {\n      isValid: check,\n      errorMessage: check ? 'OK' : 'Invalid URL',\n    };\n\n    return result;\n  }\n\n  function submitMovie() {\n    const newMovie: Movie = {\n      title: movieTitle,\n      description: movieDescription,\n      imgUrl: movieImgURL,\n      imdbUrl: movieImdbURL,\n      imdbId: movieImdbId,\n    };\n\n    onAdd(newMovie);\n  }\n\n  const canConfirm = movieTitle && movieImdbId\n                     && isValidURL(movieImgURL).isValid\n                     && isValidURL(movieImdbURL).isValid;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={() => {\n        submitMovie();\n        setCount((currentCount) => currentCount + 1);\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieTitle}\n        onChange={setMovieTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movieDescription}\n        onChange={setMovieDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movieImgURL}\n        onChange={setMovieImgURL}\n        required\n        // eslint-disable-next-line react/jsx-no-bind\n        checkValid={isValidURL}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movieImdbURL}\n        onChange={setMovieImdbURL}\n        required\n        // eslint-disable-next-line react/jsx-no-bind\n        checkValid={isValidURL}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movieImdbId}\n        onChange={setMovieImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!canConfirm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [visibleMovies, setVisibleMovies] = useState(moviesFromServer);\n\n  /* function addMovie(movie: Movie) {\n    setVisibleMovies([...visibleMovies, movie]);\n  } */\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={(movie: Movie) => {\n            setVisibleMovies([...visibleMovies, movie]);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}